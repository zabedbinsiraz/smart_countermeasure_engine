import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt




def build_vulnerability_tree(input_file, output_graph="output/vulnerability_tree.png", max_edges=500):
    """
    Builds a vulnerability tree from processed CVE data.
    
    Args:
        input_file (str): Path to the processed CSV file containing CVE data.
        output_graph (str): Path to save the visualized vulnerability tree.
        max_edges (int): Maximum number of edges to include in the graph for visualization.
    """
    import time  # To measure execution time

    start_time = time.time()

    # Load the processed data
    print("Loading data...")
    try:
        df = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"Error: File not found at {input_file}")
        return

    # Debug: Check the data
    print("DataFrame contents:")
    print(df.head())
    print(f"Number of rows: {len(df)}")

    # Ensure necessary columns exist
    if 'CVE_ID' not in df.columns or 'Impact' not in df.columns:
        print("Error: Required columns ('CVE_ID', 'Impact') not found in the dataset.")
        return

    # Create a graph object
    G = nx.Graph()

    # Add nodes for each CVE
    print("Adding nodes...")
    for index, row in df.iterrows():
        if pd.notna(row['CVE_ID']) and pd.notna(row['Impact']):
            G.add_node(row['CVE_ID'], description=row['Description'], impact=row['Impact'])

    # Group CVEs by Impact and create a hub for each group
    print("Grouping CVEs by Impact...")
    grouped = df.groupby('Impact')
    for impact, group in grouped:
        print(f"Processing group with Impact: {impact}, Number of CVEs: {len(group)}")
        cve_ids = group['CVE_ID'].tolist()
        
        # Add a hub node for each group
        hub_node = f"Hub_{impact}"
        G.add_node(hub_node, description=f"Group Hub for {impact} Impact", impact=impact)
        
        # Connect each CVE to the hub node
        for cve_id in cve_ids:
            G.add_edge(hub_node, cve_id)

    # Debug: Graph details
    print(f"Graph has {len(G.nodes)} nodes and {len(G.edges)} edges.")

    # Visualize the graph if it has nodes
    if len(G.nodes) > 0:
        plt.figure(figsize=(10, 8))
        
        # Limit edges for visualization if the graph is too large
        if len(G.edges) > max_edges:
            print(f"Graph has {len(G.edges)} edges. Limiting to {max_edges} for visualization.")
            sampled_edges = list(G.edges)[:max_edges]
            subgraph = G.edge_subgraph(sampled_edges).copy()
        else:
            subgraph = G

        pos = nx.spring_layout(subgraph)
        nx.draw(
            subgraph,
            pos,
            with_labels=True,
            node_size=500,
            node_color="lightblue",
            font_size=8,
            font_weight="bold",
        )
        plt.title("Vulnerability Tree")
        plt.savefig(output_graph)
        plt.show()
        print(f"Vulnerability tree saved to {output_graph}")
    else:
        print("The graph is empty. No tree generated.")

    print(f"Graph generation completed in {time.time() - start_time:.2f} seconds.")




# Example usage
if __name__ == "__main__":
    # Path to the processed CVE data
    input_file = "data/processed/processed_cve_data.csv"

    # Ensure the output directory exists
    import os
    os.makedirs(os.path.dirname("output/"), exist_ok=True)

    # Build and visualize the vulnerability tree
    build_vulnerability_tree(input_file)
